.\" man page 8/2/2015 vbextreme 
.\" source www.github.vbextreme/easyframework
.\"

.TH man 3 "27 April 2015" "1.0" "easyconsole man page"

.SH NAME
easyconsole

.SH SYNOPSIS
#include <easyconsole\.h>
.br

.br
typedef struct _CDIRECTRW
.br
{
.br
    int fd;
.br
    int saved_errno;
.br
    struct termios  saved;
.br
    struct termios  temporary;
.br
}CDIRECTRW;
.br

.br
typedef struct _CONPK
.br
{
.br
	INT32 prec;
.br
	INT32 width;
.br
	BOOL minus;
.br
	BOOL plus;
.br
	BOOL sharp;
.br
	BOOL precarg;
.br
	BOOL widtharg;
.br
	BOOL sh;
.br
	BOOL lg;
.br
	CHAR conv[80];
.br
	CHAR k;
.br
}CONPK;
.br

.br
typedef struct _CONMSG
.br
{
.br
	UINT32 x;
.br
	UINT32 y;
.br
	UINT32 ex;
.br
	UINT32 ey;
.br
	INT32 st;
.br
}CONMSG;
.br

.br
typedef INT32(*PKFNC)(CONPK*, va_list*);
.br

.br
#define CON_INPEX_NONE     0x00
.br
#define CON_INPEX_EOF      0x10
.br
#define CON_INPEX_DRAW     0x20
.br
#define CON_INPEX_DISCARGE 0x40
.br
typedef INT32(*INPEX)(UINT32* szb, CHAR** buf, CHAR** cbuf, INT32* c, UINT32* sty, UINT32 stx, UINT32 scrh, UINT32 scrw);
.br

.br
VOID con_async(INT32 enable);
.br

.br
#define con_flush() fflush(stdout)
.br

.br
inline VOID con_gotorc(UINT32 r, UINT32 c);
.br

.br
VOID con_getrc(UINT32* r, UINT32* c);
.br

.br
inline void con_cls();
.br

.br
inline void con_clsline(int mode);
.br

.br
void con_setcolor(unsigned char b,unsigned char f);
.br

.br
void con_setcolor256(unsigned char b,unsigned char f);
.br

.br
inline void con_special(char v);
.br

.br
void con_line(unsigned int r1,unsigned int c1,unsigned int r2,unsigned int c2,char c);
.br

.br
void con_rect(unsigned int r,unsigned int c,unsigned int h,unsigned int w);
.br

.br
void con_fillrect(unsigned int r,unsigned int c,unsigned int h,unsigned int w,char f);
.br

.br
void con_circle(unsigned int r,unsigned int c,unsigned int ra,char ch);
.br

.br
void con_ellipse(unsigned int cr,unsigned int cc,unsigned int sr,unsigned int sc,char ch);
.br

.br
void con_getmaxrc(unsigned int* r,unsigned int* c);
.br

.br
inline void con_resize(unsigned int h,unsigned int w);
.br

.br
char* con_gets(char* d,int max);
.br

.br
INT32 con_kbhit();
.br

.br
INT32 con_getch();
.br

.br
INT32 con_getchex();
.br

.br
void con_getpassword(char* psw,int sz,char mask);
.br

.br
VOID con_printfk_reg(BYTE k,PKFNC fnc);
.br

.br
INT32 con_printfk(const CHAR* format,...);
.br

.br
VOID con_msg(CONMSG* m, CHAR* msg, INT32 status);
.br

.br
VOID con_carret_up(UINT32 n);
.br
VOID con_carret_down(UINT32 n);
.br
VOID con_carret_next(UINT32 n);
.br
VOID con_carret_prev(UINT32 n);
.br
VOID con_carret_home();
.br
VOID con_carret_end();
.br
VOID con_carret_save();
.br
VOID con_carret_restore();
.br
VOID con_scrool_up();
.br
VOID con_scrool_down();
.br
VOID con_carret_delete(UINT32 n);
.br
VOID con_mode_ins(BOOL enable);
.br
VOID con_linewrap(BOOL enable);
.br
VOID con_vt100_reset();
.br

.br
CHAR* con_input(CHAR* inp, INPEX fprew, BOOL allpreview, INPEX finp, UINT32 max);
.br

.SH DESCRIPTION
These functions help to create terminal application, major function use VT100 interface.

.SH EXTENDED DESCRIPTION
.B con_async(INT32 enable);
.R (enable) 1 for enable kbhit and getch/getchex or 0 to disable
.br

.br
.B con_gotorc(UINT32 r, UINT32 c);
.R  move carret to (r) row and (c) col
.br

.br
.B con_getrc(UINT32* r, UINT32* c);
.R get current carret position, look out if enable async you can't use this function.
.br

.br
.B con_cls();
.R clear screen
.br

.br
.B con_clsline(int mode);
.R clear current line with (mode) CON_CLLS_RIGHT clear right line from cursor, CON_CLLS_LEFT clear left line from cursor, CON_CLLS_ALL clear all this line.
.br

.br
.B con_setcolor(unsigned char b,unsigned char f);
.R set color (b) back and (f) fore color. Color are definition CON_COLOR_BK_NAMECOLOR or CON_COLOR_NAMECOLOR
.br
CON_COLOR_BLACK
.br
CON_COLOR_RED
.br
CON_COLOR_GREEN
.br
CON_COLOR_YELLOW
.br
CON_COLOR_BLUE
.br
CON_COLOR_MAGENTA
.br
CON_COLOR_CYAN
.br
CON_COLOR_LGRAY
.br
CON_COLOR_DGRAY
.br
CON_COLOR_LRED
.br
CON_COLOR_LGREEN
.br
CON_COLOR_LYELLOW
.br
CON_COLOR_LBLUE
.br
CON_COLOR_LMAGENTA
.br
CON_COLOR_LCYAN
.br
CON_COLOR_WHYTE
.br
CON_COLOR_BK_BLACK
.br
CON_COLOR_BK_RED
.br
CON_COLOR_BK_GREEN
.br
CON_COLOR_BK_YELLOW
.br
CON_COLOR_BK_BLUE
.br
CON_COLOR_BK_MAGENTA
.br
CON_COLOR_BK_CYAN
.br
CON_COLOR_BK_LGRAY
.br
CON_COLOR_BK_DGRAY
.br
CON_COLOR_BK_LRED
.br
CON_COLOR_BK_LGREEN
.br
CON_COLOR_BK_LYELLOW
.br
CON_COLOR_BK_LBLUE
.br
CON_COLOR_BK_LMAGENTA
.br
CON_COLOR_BK_LCYAN
.br
CON_COLOR_BK_WHYTE
.br

.br
.B con_setcolor256(unsigned char b,unsigned char f);
.R set 8 bit color (b) back and (f) fore color
.br

.br
.B con_special(char v);
.R draw special char VT100
.br

.br
.B con_line(unsigned int r1,unsigned int c1,unsigned int r2,unsigned int c2,char c);
.R draw line from (r)ow 1 and (c)ol 1 to (r)ow 2 and (c)ol 2 with (c)har
.br

.br
.B con_rect(unsigned int r,unsigned int c,unsigned int h,unsigned int w);
.R draw rectangle from (r)ow,(c)ol with size (h)eight and (w)idth 
.br

.br
.B con_fillrect(unsigned int r,unsigned int c,unsigned int h,unsigned int w,char f);
.R fill area with (f) char 
.br

.br
.B con_circle(unsigned int r,unsigned int c,unsigned int ra,char ch);
.R draw circle from center (r)ow,(c)ol and (ra)dius with (ch)ar
.br

.br
.B con_ellipse(unsigned int cr,unsigned int cc,unsigned int sr,unsigned int sc,char ch);
.R draw ellipse
.br

.br
.B con_getmaxrc(unsigned int* r,unsigned int* c);
.R get max (r)ows and (c)ols
.br

.br
.B con_resize(unsigned int h,unsigned int w);
.R resize screen
.br

.br
.B con_gets(char* de,int max);
.R the std gets
.br

.br
.B int con_kbhit();
.R return nchar wend one or more char is in the buffer, for use this function enable con_async()
.br

.br
.B con_getch();
.R return char in the buffer
.br

.br
.B con_getchex();
.R check double byte for special char and convert or return normal character.
.br
CON_KEY_SUPER
.br
CON_KEY_CTRL
.br
CON_KEY_ALT
.br
CON_KEY_ALTGR
.br
CON_KEY_F1
.br
CON_KEY_F2
.br
CON_KEY_F3
.br
CON_KEY_F4
.br
CON_KEY_F5
.br
CON_KEY_F6
.br
CON_KEY_F7
.br
CON_KEY_F8
.br
CON_KEY_F9
.br
CON_KEY_F10
.br
CON_KEY_F11
.br
CON_KEY_F12
.br
CON_KEY_UP
.br
CON_KEY_DOWN
.br
CON_KEY_RIGHT
.br
CON_KEY_LEFT
.br
CON_KEY_CANC
.br
CON_KEY_BACK
.br
CON_KEY_PGUP
.br
CON_KEY_PGDW
.br
CON_KEY_FINE
.br
CON_KEY_HOME
.br
CON_KEY_INS
.br

.br
.B con_getpassword(char* psw,int sz,char mask);
.R input pasword with output (m)ask char.
.br

.br
.B con_printfk_reg(BYTE k,PKFNC fnc);
.R register function (fnc),
.B INT32(*PKFNC)(CONPK*, va_list*);
.R the structure CONPK have all info, width, precision,minus, plus etc. use valist for retrevie argument. Is call wend con_printfk find (k) char 
.br

.br
.B con_printfk(const CHAR* format,...);
.R is equal to printf but add, "%[b].[f]k" for color and "%[b].[f]K" color256 where [b] is back and [f] is fore number color, 
"%b" print bit default 8 bit, "%[r].[c]t" con_gotorc(), "%/" con_cls(), "%@" con_flush() 
.br

.br
.B con_msg(CONMSG* m, CHAR* msg, INT32 status);
.R progress status message, the first call with [msg] message save position in CONMSG and display with info [..], the other call
whit [msg] == NULL display [status] where status is
.br
<0 [EE] and '\n'
>99 [OK] and '\n'
0/99 [0/99]
.br

.br
.B CHAR* con_input(CHAR* inp, INPEX fprew, BOOL allpreview, INPEX finp, UINT32 max);
.R input with special char and can prew key.
.br

.SH BUGS
none

.SH EXAMPLE
#include <stdio.h>
.br
#include <stdlib.h>
.br
#include <easyconsole.h>
.br

.br
INT32 pk_sum(CONPK* pk, va_list* ap)
.br
{
.br
	INT32 a,b;
.br
	a = ( pk->widtharg ) ? va_arg(*ap,INT32) : pk->width;
.br
	b = ( pk->precarg ) ? va_arg(*ap,INT32) : pk->prec;
.br
	printf("%d",a+b);
.br
	return 0;
.br
}
.br

.br
int main(int argc, char **argv)
.br
{
.br

.br	
	CONMSG cm;
.br
	con_msg(&cm,"init",0);
.br
		con_printfk_reg('a',pk_sum);
.br
	con_msg(&cm,NULL,100);
.br

.br	
	con_printfk("5 + 5 = %5.5a\\n");
.br

.br	
	INT32 a = 13;
.br
	INT32 b = 37;
.br
	con_printfk("%d + %d = %*.*a\\n%@",a,b,a,b);
,br

.br	
	con_msg(&cm,"press any key to continue...",0);
.br
		con_async(1,NULL);
.br
			while(!con_kbhit());
.br
			CHAR c = con_getchex();
.br
		con_async(0,NULL);
.br
		if ( c == 27 ) 
.br
		{
.br
			con_msg(&cm,NULL,-1);
.br
			return 0;
.br
		}
.br
	con_msg(&cm,NULL,100);
.br

.br	
	con_cls();
.br
	UINT32 sw,sh;
.br
	con_getmaxrc(&sh,&sw);
.br
	
.br	
	con_rect(1,1,sh,sw);
.br
	con_circle(sh/2+1,sw/2,sh/2 - 1,'.');
.br

.br	
	con_line(sh/2 + 1, sw/2 - sw/4, sh/2 + 1, sw/2 + sw/4, '-');
.br
	con_line(sh/2 - sh/3 + 1, sw/2 - sw/4, sh/2 + sh/3 + 1, sw/2 + sw/4, '\\');
.br
	con_line(sh/2 + sh/3 + 1, sw/2 - sw/4, sh/2 - sh/3 + 1, sw/2 + sw/4, '/');
.br

.br	
	con_gotorc(2,2);
.br
	con_printfk("press any key to continue...%@");
.br
	con_async(1,NULL);
.br
		while(!con_kbhit());
.br
		c = con_getchex();
.br
	con_async(0,NULL);
.br

.br	
	con_cls();
.br

.br	
	return 0;
.br
}
.br

.SH EXAMPLE
typedef struct _COLORIZED
.br
{
.br
	UINT32 sxw;
.br
	UINT32 syw;
.br
	CHAR word[128];
.br
	UINT32 color;
.br
}COLORIZED;
.br

.br
INT32 prew(UINT32* szb, CHAR** b, CHAR** cbu, INT32* c, UINT32* sty, UINT32 stx, UINT32 scrh, UINT32 scrw)
.br
{
.br
	COLORIZED col[1024];
.br
	static UINT32 ncol = 0;
.br
	static CHAR* cu = NULL;
.br
	static UINT32 insty;
.br
	static UINT32 instx;
.br

.br
	if (cu == NULL )
.br
	{
.br
		cu = col[0].word;
.br
		insty = *sty;
.br
		instx = stx;
.br
	}
.br
		
.br
	CHAR* buf = *b;
.br
	CHAR* cbuf = *cbu;
.br
	UINT32 cb = cbuf - buf;
.br
	UINT32 cy,cx;
.br
	UINT32 i;
.br

.br
	cy = *sty + ( cb + stx -1) / scrw;
.br
	if ( cy == *sty ) 
.br
		cx =  (cb + stx) % scrw;
.br
	else
.br
		cx = (cb - (scrw - stx)) % scrw;
.br

.br	
	if (!cx ) cx = scrw;
.br

.br
	if ( insty != *sty )
.br
	{
.br
		insty = *sty;
.br
		for ( i = 0; i < ncol; ++i)
.br
			col[i].syw = insty;
.br
	}
.br

.br
	if ( *c != ' ' )
.br
	{
.br
		for ( i = 0; i < ncol; ++i)
.br
		{
.br
			con_gotorc(col[i].syw,col[i].sxw);
.br
			con_setcolor(0,col[i].color);
.br
			printf("%s",col[i].word);
.br
		}
.br
		*cu++ = *c;
.br
		con_setcolor(0,0);
.br
		con_gotorc(cy,cx);
.br
		con_flush();
.br
		return CON_INPEX_NONE;
.br
	}
.br
    *cu = '\0';
.br

.br
	if ( !strcmp(col[ncol].word,"con") )
.br
	{
.br
		col[ncol].syw = cy;
.br
		col[ncol].sxw = cx - (( cu - col[ncol].word) + 1);
.br
		col[ncol].color = CON_COLOR_RED;
.br
		++ncol;
.br
		cu = col[ncol].word;
.br
	}
.br
	else
.br
	{
.br
		cu = col[ncol].word;
.br
	}
.br

.br
	for ( i = 0; i < ncol; ++i)
.br
	{
.br
		con_gotorc(col[i].syw,col[i].sxw);
.br
		con_setcolor(0,col[i].color);
.br
		printf("%s",col[i].word);
.br
	}
.br
	con_setcolor(0,0);
.br
	con_gotorc(cy,cx);
.br
	con_flush();
.br
	
.br
	return CON_INPEX_NONE;
.br
}
.br

.br
int main(int argc, char **argv)
.br
{	
.br	
	printf("input$ ");
.br
	con_flush();
.br
	CHAR* r = con_input(NULL,NULL,FALSE,prew,15);
.br

.br
	printf("\n[%s]\n",r);
.br

.br
	free(r);
.br
	return 0;
.br
}
.br

.SH SEE ALSO
easyframework(3)

.SH LICENSE
gpl

.SH AUTHORS
vbextreme
