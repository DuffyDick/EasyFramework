.\" man page 8/2/2015 vbextreme 
.\" source www.github.vbextreme/easyframework
.\"

.TH man 3 "08 March 2015" "1.0" "easyalloc man page"

.SH NAME
easyalloc

.SH SYNOPSIS
#include <easyalloc\.h>
.br

.br
VOID alc_freem(VOID **b,UINT32 y);
.br

.br
VOID** alc_mallocm(UINT32 y,UINT32 x,SIZET st);
.br

.br
VOID** alc_reallocm(VOID **b,INT32 oldy,INT32 oldx,INT32 newy,INT32 newx,SIZET st);
.br

.br
inline SIZET alc_rsizeof(SIZET type);
.br

.br
inline VOID* mal_init(register VOID* baseadr,register SIZET szmem);
.br

.br
VOID* mal_malloc(register VOID* baseadr,register SIZET reqmem);
.br

.br
VOID mal_free(register VOID* freeadr);

.SH DESCRIPTION
These functions help to allocate arrays, multidimensional arrays, and allows dynamic allocation of a buffer any

.SH EXTENDED DESCRIPTION
.B alc_new(TYPE,N);
.R macro for safe malloc
.br

.br
.B alc_free(VAR);
.R macro free with autesetting var = NULL 
.br

.br
.B alc_neww(TYPE,NY,NX);
.R macro for safe alc_mallocm
.br

.br
.B alc_freem(VOID **b, UINT32 y);
.R free bidimensional vector (b) whith rows (y)
.br

.br
.B alc_mallocm(UINT32 y,UINT32 x,SIZET st);
.R allocate bidimensional vector with (y) rows, (x) cols and (st) size, return pointer pointer memory
.br

.br 
.B alc_reallocm(VOID **b,INT32 oldy,INT32 oldx,INT32 newy,INT32 newx,SIZET st);
.R realloc bidimensional vector
.br

.br
.B alc_rsizeof(SIZET type);
.R return real sizeof, allineated at SIZET
.br

.br
.B mal_init(register VOID* baseadr,register SIZET szmem);
.R initialize buffer for general malloc, (baseadr) can be a stack buffer, of the heap or shared memory, (szmem) is size in
 byte of buffer, return baseadr or NULL for error.
.br

.br
.B mal_malloc(register VOID* baseadr,register SIZET reqmem);
.R (reqmem) is size of memory need, return address of memory or NULL for error. Thread safe.
.br

.br
.B mal_free(register VOID* freeadr);
.R free memory, thread safe.
.br

.SH EXAMPLE
#include <stdio.h>
.br
#include <stdlib.h>
.br
#include <easyalloc.h>
.br
 
.br
int main(int argc,char** argv)
.br
{
.br
	VOID* submem = alc_new(char*, 1024);
.br
	mal_init(submem, 1024);
.br
	INT32* var = mal_malloc(submem,sizeof(INT32));
.br
		*var = 1;
.br
	FLOAT64* fvar = mal_malloc(submem,sizeof(FLOAT64) * 3);
.br
		fvar[0] = 0.0;
.br
	mal_free(var);
.br
	mal_free(fvar);
.br
	alc_free(submem);
.br
	return 0;
.br
}
.br

.SH SEE ALSO
easyframework(3)

.SH LICENSE
gpl

.SH AUTHORS
vbextreme
